% original size: lines = 32 line width = 80
% bounds: min_size = 0 max_size = 120 min_lines = 0
% transformed to maxlen = 80
\begin{minted}[mathescape, breaklines]{python}
class FinitePosetSubsetOperations(ABC):
  @abstractmethod
  def upperclosure(self, fp: FinitePoset, s: Set[Element]) -> Set[Element]:
    """ Computes the upper closure of an element"""

  @abstractmethod
  def lowerclosure(self, fp: FinitePoset, s: Set[Element]) -> Set[Element]:
    """ Computes the lower closure of an element"""

  @abstractmethod
  def maximal(self, fp: FinitePoset, s: Set[Element]) -> Set[Element]:
    """ Computes the maximal elements in a subset of the poset"""

  @abstractmethod
  def minimal(self, fp: FinitePoset, s: Set[Element]) -> Set[Element]:
    """ Computes the minimal elements in a subset of the poset"""

  @abstractmethod
  def infimum(self, fp: FinitePoset, s: Set[Element]) -> Optional[Element]:
    """ Computes the infimum for the subset, or None if one does not exist. """

  @abstractmethod
  def supremum(self, fp: FinitePoset, s: Set[Element]) -> Optional[Element]:
    """ Computes the supremum for the subset, or None if one does not exist. """

  @abstractmethod
  def meet(self, fp: FinitePoset, s: Set[Element]) -> Optional[Element]:
    """ Computes the meet for the subset, or None if one does not exist. """

  @abstractmethod
  def join(self, fp: FinitePoset, s: Set[Element]) -> Optional[Element]:
    """ Computes the join for the subset, or None if one does not exist. """
\end{minted}